"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8066],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var a=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(r),d=i,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||n;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,s=new Array(n);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<n;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8226:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=r(7462),i=r(3366),n=(r(7294),r(3905)),s=["components"],o={},c=void 0,l={unversionedId:"cliref/rhoas_service-registry_artifact_create",id:"cliref/rhoas_service-registry_artifact_create",isDocsHomePage:!1,title:"rhoas_service-registry_artifact_create",description:"rhoas service-registry artifact create",source:"@site/docs/cliref/rhoas_service-registry_artifact_create.md",sourceDirName:"cliref",slug:"/cliref/rhoas_service-registry_artifact_create",permalink:"/app-services-website/cliref/rhoas_service-registry_artifact_create",editUrl:"https://github.com/redhat-developer/app-services-website/docs/cliref/rhoas_service-registry_artifact_create.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rhoas_service-registry_artifact",permalink:"/app-services-website/cliref/rhoas_service-registry_artifact"},next:{title:"rhoas_service-registry_artifact_delete",permalink:"/app-services-website/cliref/rhoas_service-registry_artifact_delete"}},p=[{value:"rhoas service-registry artifact create",id:"rhoas-service-registry-artifact-create",children:[{value:"Synopsis",id:"synopsis",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Options",id:"options",children:[]},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",children:[]},{value:"SEE ALSO",id:"see-also",children:[]}]}],f={toc:p};function u(e){var t=e.components,r=(0,i.Z)(e,s);return(0,n.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"rhoas-service-registry-artifact-create"},"rhoas service-registry artifact create"),(0,n.kt)("p",null,"[beta]"," Creates new artifact from file or standard input"),(0,n.kt)("h3",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Creates a new artifact by posting the artifact content to the registry instance."),(0,n.kt)("p",null,"Artifacts are typically in JSON format for most of the supported types, but may be in another format for a few (for example, PROTOBUF).\nService Registry attempts to figure out what kind of artifact is being added from the following supported list:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Avro (AVRO)"),(0,n.kt)("li",{parentName:"ul"},"Protobuf (PROTOBUF)"),(0,n.kt)("li",{parentName:"ul"},"JSON Schema (JSON)"),(0,n.kt)("li",{parentName:"ul"},"Kafka Connect (KCONNECT)"),(0,n.kt)("li",{parentName:"ul"},"OpenAPI (OPENAPI)"),(0,n.kt)("li",{parentName:"ul"},"AsyncAPI (ASYNCAPI)"),(0,n.kt)("li",{parentName:"ul"},"GraphQL (GRAPHQL)"),(0,n.kt)("li",{parentName:"ul"},"Web Services Description Language (WSDL)"),(0,n.kt)("li",{parentName:"ul"},"XML Schema (XSD)")),(0,n.kt)("p",null,"An artifact is created using the content provided in the request body.\nThis content is created with a unique artifact ID that can be provided by user.\nIf not provided in the request, the registry server generates a unique ID for the artifact.\nIt is typically recommended that callers provide the ID, because this is a meaningful identifier, and for most use cases should be supplied by the caller.\nIf an artifact with the provided artifact ID already exists, the command will fail with an error."),(0,n.kt)("p",null,'When the --group parameter is missing, the command uses the "default" group.\nwhen the --instance-id is missing, the command creates a new artifact for the currently active Service Registry instance (displayed in rhoas service-registry describe)'),(0,n.kt)("p",null,"This command is available as part of the Development Preview release."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"rhoas service-registry artifact create [flags]\n")),(0,n.kt)("h3",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"# Create an artifact in the default group\nrhoas service-registry artifact create my-artifact.json\n\n# Create an artifact with the specified type\nrhoas service-registry artifact create --type=JSON my-artifact.json\n\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'      --artifact-id string   ID of the artifact\n      --description string   Custom description of the artifact\n      --file string          File location of the artifact\n  -g, --group string         Artifact group (default "default")\n      --instance-id string   ID of the Service Registry instance to be used. By default, uses the currently selected instance\n      --name string          Custom name of the artifact\n  -o, --output string        Format in which to display the Service Registry instance (choose from: "json", "yml", "yaml") (default "json")\n  -t, --type string          Type of artifact. Choose from: AVRO, PROTOBUF, JSON, OPENAPI, ASYNCAPI, GRAPHQL, KCONNECT, WSDL, XSD, XML\n      --version string       Custom version of the artifact (for example 1.0.0)\n')),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  -h, --help      Show help for a command\n  -v, --verbose   Enable verbose mode\n")),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/app-services-website/cliref/rhoas_service-registry_artifact"},"rhoas service-registry artifact"),"\t - ","[beta]"," Manage Service Registry artifacts")))}u.isMDXComponent=!0}}]);